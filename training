#!/usr/bin/env python

# * Copyright 2016 Alistair Buxton <a.j.buxton@gmail.com>
# *
# * License: This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License as published
# * by the Free Software Foundation; either version 3 of the License, or (at
# * your option) any later version. This program is distributed in the hope
# * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# * GNU General Public License for more details.

import sys
import argparse
import importlib
import itertools

import numpy

from teletext.vbi.training import *

from teletext.vbi.map import raw_line_map, raw_line_reader
from teletext.vbi.pattern import build_pattern
from teletext.misc.all import All

from teletext.t42.coding import parity_set, hamming_set

if sys.platform == "win32":
    import os, msvcrt
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

parser = argparse.ArgumentParser(description='Training tool.')

group = parser.add_mutually_exclusive_group()

group.add_argument('-g', '--generate', help='Generate t42 packets for raspi-teletext.', action='store_true')
group.add_argument('-t', '--train', type=str, metavar='FILE', help='Generate training tables.', default=False)
group.add_argument('--split', type=str, metavar='FILE', help='Split training tables by first byte.', default=False)
group.add_argument('--sort', type=str, metavar='FILE', help='Sort a training table.', default=False)
group.add_argument('--dump', type=str, metavar='FILE', help='Dump a training table.', default=False)
group.add_argument('--squash', type=str, metavar='FILE', help='Squash a training table.', default=False)
group.add_argument('--full', type=str, metavar='FILE', help='Squash a training table.', default=False)
group.add_argument('--parity', type=str, metavar='FILE', help='Squash a training table.', default=False)
group.add_argument('--hamming', type=str, metavar='FILE', help='Squash a training table.', default=False)

args = parser.parse_args()

if args.generate:
    generate_lines()


elif args.train:
    from teletext.vbi.line import Line
    import config_bt8x8_pal as config
    Line.set_config(config)
    Line.disable_cuda()

    code_bit_nums = numpy.array(range(257, 257+(32*3), 3))

    def doit(rl):
        l = Line(rl)
        l.bits()

        code_bits = numpy.clip((l.bits_array[code_bit_nums] - 127), 0, 1).astype(numpy.uint8)
        code = numpy.packbits(code_bits[::-1])[::-1]
        if checksum(code) == code[3]:
            l.pattern_offset = code[0] | (code[1]<<8) | (code[2]<<16)
            l.uint8bits = numpy.clip(l.bits_array, 0, 255).astype(numpy.uint8)
        else:
            l.is_teletext = False
        return l

    it = raw_line_map(args.train, config.line_length, doit, threads=0, show_speed=True)

    prev_offset = 0

    pattern = load_pattern()

    for l in it:
        if l.pattern_offset != prev_offset:
             for x, bytes in get_subpatterns(l.pattern_offset, pattern):
                 bytes.tofile(sys.stdout)
                 l.uint8bits[32+x:32+x+24].tofile(sys.stdout)

elif args.split:
    files = [open('training.%02x.dat' % n, 'wb') for n in range(256)]

    for n,line in raw_line_reader(args.split, 27):
        files[ord(line[0])].write(line)        

elif args.sort:
    lines = []
    for n,line in raw_line_reader(args.sort, 27):
        lines.append(line)

    lines.sort()
    f = open(args.sort+'.sorted', 'wb')
    for line in lines:
        f.write(line)
    f.close()

elif args.dump:
    lines = []
    for n,line in raw_line_reader(args.dump, 27):
        print ' '.join(['%02x' % ord(c) for c in line])

elif args.squash:

    it = raw_line_reader(args.squash, 27)

    f = open(args.squash+'.squashed', 'wb')

    for k,g in itertools.groupby((item[1] for item in it), lambda x: x[:3]):
        a = list(g)
        b = numpy.fromstring(''.join(a), dtype=numpy.uint8).reshape((len(a), 27))
        b = numpy.mean(b, axis=0).astype(numpy.uint8)
        b.tofile(f)

    f.close()

elif args.full:

    build_pattern(args.full, 'full.dat', 3, 19)

elif args.parity:

    build_pattern(args.parity, 'parity.dat', 4, 18, parity_set)

elif args.hamming:

    build_pattern(args.hamming, 'hamming.dat', 1, 20, hamming_set)


sys.stderr.write('\n')
