#!/usr/bin/env python

import sys
import time
import argparse
import importlib
from itertools import islice
import numpy

from OpenGL.GLUT import *
from OpenGL.GLU import *
from OpenGL.GL import *

from teletext.vbi.map import raw_line_map
from teletext.vbi.pattern import Pattern
from teletext.vbi.line import Line

class VBIViewer(object):

    def __init__(self, filename, config, start, stop, name = "VBI Viewer", width=1024, height=1024, nlines=32, pass_teletext=True, pass_rejects=False, show_grid=False):
        self.config = config
        self.show_grid = show_grid

        self.nlines = nlines
        self.file = open(filename, 'rb')

        self.lines_src = raw_line_map(filename, self.config.line_length, Line, start=start, stop=stop, threads=0, show_speed=True, pass_teletext=pass_teletext, pass_rejects=pass_rejects)

        glutInit(sys.argv)
        glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)
        glutInitWindowSize(width,height)
        glutCreateWindow(name)

        glutDisplayFunc(self.display)

        glMatrixMode(GL_PROJECTION)
        glOrtho(0, config.line_length, 0, self.nlines, -1, 1)
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()

        glDisable(GL_LIGHTING)
        glDisable(GL_DEPTH_TEST)
        glEnable(GL_TEXTURE_2D)
        glBindTexture(GL_TEXTURE_2D, glGenTextures(1))
        glPixelStorei(GL_UNPACK_ALIGNMENT,1)

        glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
        glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
        glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL)


        glutMainLoop()

    def display(self):

        vbi = numpy.array([x.orig for x in islice(self.lines_src, 0, self.nlines)], dtype=numpy.uint8).tostring()
#        time.sleep(0.1)
        if not sys.stdout.isatty():
            sys.stdout.write(vbi)

        if len(vbi) != config.line_length*self.nlines:
#            return
            exit(0)

        glEnable(GL_TEXTURE_2D)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, self.config.line_length, self.nlines, 0, GL_LUMINANCE, GL_UNSIGNED_BYTE, vbi)


        glBegin(GL_QUADS)

        glTexCoord2f(0, 1)
        glVertex2f(   0, 0)

        glTexCoord2f(0, 0)
        glVertex2f(   0, self.nlines)

        glTexCoord2f(1, 0)
        glVertex2f(self.config.line_length, self.nlines)

        glTexCoord2f(1, 1)
        glVertex2f(self.config.line_length, 0)

        glEnd()

        if 1:

            glDisable(GL_TEXTURE_2D)

            glBegin(GL_LINES)

        if self.show_grid:
            glColor3f(0, 0, 0)

            if self.nlines < 65:
              for x in range(self.nlines):
                glVertex2f(0, x)
                glVertex2f(2048, x)

        if self.show_grid:
            glColor3f(1, 0, 0)

            for x in self.config.line_start_range:
                glVertex2f(x, 0)
                glVertex2f(x, self.nlines)

            glColor3f(0, 1, 0)
            for x in self.config.line_start_pre:
                glVertex2f(x, 0)
                glVertex2f(x, self.nlines)

            for x in self.config.line_start_post:
                glVertex2f(x, 0)
                glVertex2f(x, self.nlines)


            glVertex2f(config.line_trim, 0)
            glVertex2f(config.line_trim, self.nlines)



        if self.show_grid:
            glColor3f(0, 0, 1)
            for x in self.config.bits[::8]:
                glVertex2f(x, 0)
                glVertex2f(x, self.nlines)

        if 1:
            glEnd()




        glutSwapBuffers()
        glutPostRedisplay()

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('inputfile', type=str, help='Read VBI samples from this file.')

    parser.add_argument('-c', '--config', help='Configuration. Default bt8x8_pal.', default='bt8x8_pal')

    parser.add_argument('--start', type=int, metavar='N', help='Start after the Nth line of the input file.', default=0)
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--stop', type=int, metavar='N', help='Stop before the Nth line of the input file.', default=-1)
    group.add_argument('--count', type=int, metavar='N', help='Stop after processing N lines from the input file.', default=-1)

    parser.add_argument('-t', '--hide-teletext', help='Don\'t show lines which are detected as teletext.', action='store_true', default=False)
    parser.add_argument('-r', '--pass-rejects', help='Display lines which are detected as NOT teletext.', action='store_true', default=False)
    parser.add_argument('-g', '--show-grid', help='Draw a grid over the data, showing where the software expects the data to be.', action='store_true', default=False)

    args = parser.parse_args()

    if args.stop == -1 and args.count > -1:
        args.stop = args.start + args.count

    try:
        config = importlib.import_module('config_'+args.config)
    except ImportError:
        sys.stderr.write('No configuration file for '+args.config+'.\n')

    config.patterns = "sp"
    Line.set_config(config)
    Line.disable_cuda()

    v = VBIViewer(args.inputfile, config, args.start, args.stop, pass_teletext=(not args.hide_teletext), pass_rejects=args.pass_rejects, show_grid=args.show_grid)
